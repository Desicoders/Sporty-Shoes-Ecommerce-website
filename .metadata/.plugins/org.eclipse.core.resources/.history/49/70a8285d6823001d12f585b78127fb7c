package com.sporty.shoes.service;

import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.util.ReflectionUtils;

import com.sporty.shoes.Repositry.UserRepo;
import com.sporty.shoes.Repositry.VerificationTokenRepo;
import com.sporty.shoes.enteties.Users;
import com.sporty.shoes.enteties.VericicationToken;
import com.sporty.shoes.exceptions.UserNotFoundException;
@org.springframework.stereotype.Service
@Transactional
public class UserServiceImpl implements Service<Users> {

	@Autowired
	UserRepo userRepo;
	
	@Autowired
	private VerificationTokenRepo verificationTokenRepo;
	
	@Autowired
	PasswordEncoder passwordEncoder;

	@Override
	public List<Users> getAll() {
		return userRepo.findAll();
	}

	@Override
	public Users get(int id) {
		return userRepo.findById(id).orElseThrow(() -> new UserNotFoundException("no user with id = " + id));
	}

	@Override
	public void delete(int id) {
		userRepo.deleteById(id);
	}

	@Override
	public Users update(int id, String fieldname, Object FieldValue) {
		Users users = userRepo.findById(id).orElseThrow(() -> new UserNotFoundException("no user with id = " + id));
		Field field = ReflectionUtils.findField(users.getClass(), fieldname);
		field.setAccessible(true);
		ReflectionUtils.setField(field, users, FieldValue);
		userRepo.save(users);
		return users;
		

	}

	@Override
	public Users save(Users obj) {
		obj.setPassword(passwordEncoder.encode(obj.getPassword()));
		userRepo.saveAndFlush(obj);
		return obj;
	}
	
	public List<Users> getUsesrByName(String name)
	{
		return userRepo.findByNameContaining(name);
	}

	public void saveVerificationTokenForUser(Users user, String token) {
		// TODO Auto-generated method stub
		VericicationToken vericicationToken=new VericicationToken(user,token);
		verificationTokenRepo.save(vericicationToken);
		
		
		
	}

	public String validVerificationToken(String token) {
		VericicationToken vericicationToken= 
				verificationTokenRepo.findByToken(token);
		if (vericicationToken==null)
			return "invalid";
		
		Users user=vericicationToken.getUser();
		Calendar currentcal=Calendar.getInstance();
		if(vericicationToken.getExpirationTime().getTime()-currentcal.getTime().getTime()<=0) {
            verificationTokenRepo.delete(vericicationToken);   		
		return "expired";
		}
		user.setEnabled(true);
		userRepo.saveAndFlush(user);
		
		
		
	}

}
