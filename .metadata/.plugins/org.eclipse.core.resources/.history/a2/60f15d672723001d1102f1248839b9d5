package com.sporty.shoes.controller;

import java.lang.reflect.Method;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;

import com.sporty.shoes.enteties.FieldValue;
import com.sporty.shoes.enteties.Orders;
import com.sporty.shoes.enteties.Products;
import com.sporty.shoes.enteties.Users;
import com.sporty.shoes.event.SignupCompleteEvent;
import com.sporty.shoes.service.OrderServiceImpl;
import com.sporty.shoes.service.ProductServiceImpl;
import com.sporty.shoes.service.UserServiceImpl;

@RestController
@RequestMapping("/users")
public class UserController {

	@Autowired
	ApplicationEventPublisher publisher;
	
	@Autowired
	UserServiceImpl userServiceImpl;
	
	@Autowired
	ProductServiceImpl productServiceImpl;
	
	@Autowired
	OrderServiceImpl orderServiceImpl;
	
	@GetMapping("/{id}")
	ResponseEntity<Users> getUser(@PathVariable int id)
	{ 
		return new ResponseEntity<Users>( userServiceImpl.get(id),HttpStatus.OK);
	}
	
	@PostMapping("/{userid}/product/{productid}/order")
		public ResponseEntity<EntityModel<Orders>> createOrder(@PathVariable int userid, @PathVariable int productid) throws NoSuchMethodException, SecurityException
		{
		Users user=userServiceImpl.get(userid);
		
		Products product=productServiceImpl.get(productid);
		
		productServiceImpl.update(productid,"quantityInStock", product.getQuantityInStock()-1);
		Orders order=new Orders();
		order.setProduct(product);
		order.setUsers(user);
		orderServiceImpl.save(order);
		
		EntityModel<Orders> entityModel= EntityModel.of(order);
		Method method=this.getClass().getMethod("getAllOrders",Integer.class);
		method.setAccessible(true);
		Link linktoOrders =WebMvcLinkBuilder.linkTo(method,userid).withSelfRel();;
		entityModel.add(linktoOrders);
		
		return new ResponseEntity<EntityModel<Orders>>(entityModel,HttpStatus.CREATED);
		
		}
	
	@GetMapping("/{userid}/order/all")
	public ResponseEntity <List<Orders> >getAllOrders(@PathVariable Integer userid)
	{
		Users users=userServiceImpl.get(userid);
		return new ResponseEntity<List<Orders>>(orderServiceImpl.getAllOrdersByUser(users),HttpStatus.OK);
		
		
	}
	@PatchMapping("/{userid}/update/password")
	public ResponseEntity <String >updatePassword(@PathVariable Integer userid,@RequestBody FieldValue fielvalue)
	{
		
		Users users=userServiceImpl.update(userid, "pass",fielvalue.getFieldValue());
		return new ResponseEntity<String>("User's password updated",HttpStatus.OK);
		
		
	}
	@PatchMapping("/{userid}/update/name")
	public ResponseEntity <String >updateName(@PathVariable Integer userid,@RequestBody FieldValue fielvalue)
	{
		
		Users users=userServiceImpl.update(userid, "name",fielvalue.getFieldValue());
		return new ResponseEntity<String>("Username updated updated",HttpStatus.OK);
		
		
	}
	
	@PostMapping("/signup")
	public ResponseEntity<Users> signupUp(@RequestBody Users users,final HttpServletRequest request)
	{
		userServiceImpl.save(users);
		publisher.publishEvent(new SignupCompleteEvent(users,applicationUrl(request)));
		return new ResponseEntity<Users>(users,HttpStatus.CREATED);
	}

	private String applicationUrl(HttpServletRequest request) {
		return "http://"+request.getServerName()+":"+request.getServerPort()+"/"+
				request.getContextPath();
	}
	
	
	
}
